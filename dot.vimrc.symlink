" General settings
"
echo "(>^.^<)"
set nocompatible
filetype plugin indent on
set splitright

" Autoread files whenever they are being changed outside vim
set autoread
filetype off

" Settings
set rtp+=~/.vim/bundle/Vundle.vim
set number
set encoding=utf-8

" set columns=93
set autoread
set autowrite

" indentation
set sts=4
set ts=4
set sw=4

set updatetime=100

let @s="100|2hbi\"\\\<CR>f\"\<Esc>"

augroup python
    autocmd!
    autocmd FileType python
                \   syn keyword pythonExceptions self
                \ | highlight def link pythonExceptions Special
augroup end

augroup BgHighlight
    autocmd!
    autocmd WinEnter,BufRead * set number
    autocmd WinLeave * setlocal nonumber
augroup END

set statusline=%f

" Keymappings
let mapleader = ","

" delete that doesn't occupy register
nnoremap <leader>r :checktime<CR>:so $MYVIMRC<CR>
nnoremap <leader>v :e $MYVIMRC<CR>
nnoremap <leader>V :!e $MYVIMRC<CR>
nnoremap <leader>w :w <cr>
nnoremap <leader>b :Black <cr>
noremap / :set hlsearch <cr> /
noremap <leader>/ :set hlsearch!<CR>
noremap <leader><C-V> :set paste!<CR>
nnoremap <leader>j J
nmap <leader>p <Plug>(GitGutterPreviewHunk)
nmap <leader>gu <Plug>(GitGutterUndoHunk)

nnoremap <leader>f :Files <CR>
nnoremap <leader>s :Rg <CR>

nmap <C-n> :NERDTreeToggle<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-B>  :YcmCompleter GoToDeclaration <CR>
nnoremap <C-S>  :YcmCompleter config.yaml GoToDeclaration <CR>
noremap <C-X> :call NERDComment(-1,"toggle")<CR>

" Turbomove
noremap J 5j
noremap K 5k
noremap L 5l
noremap H 5h

inoremap jk <ESC>
inoremap JK <ESC>

" Abbreviations
iabbr bp import pdb; pdb.set_trace()

" source .vimrc after saving it
au bufwritepost .vimrc source $MYVIMRC
au bufwritepre * :%s/\s\+$//e

" PEP8
au Filetype python
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

call vundle#begin()
" Add plugins here
Plugin 'VundleVim/Vundle.vim'

" Send to pane only for tmux
" Plugin 'vim-slime'
Plugin 'jpalardy/vim-slime'

" Nerdtree
Plugin 'scrooloose/nerdtree'

" Proper indentation
Plugin 'vim-scripts/indentpython.vim'

" Highligt first unique letter in each word when using f or t
Plugin 'unblevable/quick-scope'

" Colorscheme
Plugin 'morhetz/gruvbox'

" Black
Plugin 'psf/black'

" Rg
Plugin 'junegunn/fzf', { 'do': './install --bin' }

"fzf
Plugin 'junegunn/fzf.vim'

Plugin 'tpope/vim-surround'

" for linting
Plugin 'vim-syntastic/syntastic'

" autocompletion of paranthesis
Plugin 'Krasjet/auto.pairs'

Plugin 'junegunn/vim-easy-align'

Plugin 'airblade/vim-gitgutter'

" Autocompletion and jump to definition
Bundle 'Valloric/YouCompleteMe'

Plugin 'preservim/nerdcommenter'

call vundle#end()

" Plugin Settings
" Slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": 1}

" Gruvbox
colorscheme gruvbox
set background=dark
syn keyword pythonExceptions self
set t_Co=256

" Nerd commenter
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1

"Nerd tree
let g:NERDTreeWinSize=37

"YouCompleteMe
let g:ycm_autoclose_preview_window_after_insertion = 1


"Easy Align
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

"FZF
let $FZF_DEFAULT_COMMAND='rg --files'

"GitGutter


command! -bang -nargs=? -complete=dir Files
			\ call fzf#vim#files(<q-args>, {'options': ['--tiebreak', 'end', '--info=inline', '--preview', 'bat --color=always --style=numbers {}']}, <bang>0)


command! -bang -nargs=* Rg
  \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}), <bang>0)

let g:fzf_preview_window = ['right:50%', 'ctrl-/']


" Have persistent undo in vim
let vimDir = '$HOME/.vim'

if stridx(&runtimepath, expand(vimDir)) == -1
  " vimDir is not on runtimepath, add it
  let &runtimepath.=','.vimDir
endif

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
	let myUndoDir = expand(vimDir . '/undodir')
	" Create dirs
	:silent call system('mkdir ' . vimDir)
	:silent call system('mkdir ' . myUndoDir)
	let &undodir = myUndoDir
	set undofile
endif
